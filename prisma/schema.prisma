// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
  dashboard     Dashboard?
  mockTests     MockTest[]
  studyStreak   StudyStreak?
  dailyActivities DailyActivity[]
  studyGoals    StudyGoal[]
  examName      String?   // Added exam name
  examDate      DateTime? // Added exam date
  targetScore   Int?      // Target score percentage
  totalMarks    Int?      // Total marks in the exam
  targetMarks   Int?      // Target marks in the exam
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  studyPhases   StudyPhase[]
  dailySchedules DailySchedule[]
  performanceMetrics PerformanceMetrics[]
  studyPlans    StudyPlan[]
  studyProgress StudyProgress[]
  gateTests     GateTest[]
  testProgress  TestProgress[]
  focusSessions FocusSession[]
  settings      UserSettings?
  topicProgress TopicProgress[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id               String    @id @default(cuid()) @map("_id")
  name             String    
  weightage        Float     // GATE subject weightage
  expectedMarks    Float     // Expected marks based on progress
  foundationLevel  String    // Beginner, Moderate, Advanced
  overallProgress  Float     @default(0)  // Overall subject progress
  learningProgress Float     @default(0)  // Learning progress
  revisionProgress Float     @default(0)  // Revision progress
  practiceProgress Float     @default(0)  // Practice progress
  testProgress     Float     @default(0)  // Test progress
  position         Int       @default(0)  // Position for drag-and-drop ordering
  chapters         Chapter[]
  tests           Test[]
  mockTests       MockTest[]
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  performanceMetrics PerformanceMetrics[]
  testProgressRecords TestProgress[]
  focusSessions     FocusSession[]
  progress        TopicProgress[]

  @@index([userId])
}

model Chapter {
  id               String   @id @default(cuid()) @map("_id")
  name             String
  important        Boolean  @default(false)
  overallProgress  Float    @default(0)  // Overall chapter progress
  learningProgress Float    @default(0)  // Learning progress
  revisionProgress Float    @default(0)  // Revision progress
  practiceProgress Float    @default(0)  // Practice progress
  testProgress     Float    @default(0)  // Test progress
  topics           Topic[]
  subjectId        String
  subject          Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([subjectId])
}

model Topic {
  id              String    @id @default(cuid()) @map("_id")
  name            String
  important       Boolean   @default(false)
  learningStatus  Boolean   @default(false)  // Single checkmark
  revisionCount   Int       @default(0)      // Progress out of 3
  practiceCount   Int       @default(0)      // Progress out of 3
  testCount       Int       @default(0)      // Progress out of 3
  position        Int       @default(0)      // Position in the chapter's topic list
  lastRevised     DateTime?
  nextRevision    DateTime?
  chapterId       String
  chapter         Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress        TopicProgress[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([chapterId])
}

model Test {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  score       Float    // Percentage score
  totalMarks  Int
  marksScored Float
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subjectId])
}

model Dashboard {
  id                     String   @id @default(cuid()) @map("_id")
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  overallProgress        Float    @default(0)  // Overall preparation progress
  learningProgress       Float    @default(0)  // Overall learning progress
  revisionProgress      Float    @default(0)  // Overall revision progress
  practiceProgress      Float    @default(0)  // Overall practice progress
  testProgress         Float    @default(0)  // Overall test progress
  currentScore         Float    // Current average score
  predictedScore       Float    // Predicted final score
  expectedAIR          Int?     // Expected All India Rank
  completedChapters    Int      @default(0)
  totalChapters        Int      @default(0)
  timeRequired         Int      // Estimated hours needed to complete syllabus
  lastUpdated          DateTime @updatedAt
}

model MockTest {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  score       Float    // Percentage score
  totalMarks  Int
  marksScored Float
  subjectId   String
  userId      String
  testDate    DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([subjectId])
}

model StudyStreak {
  id            String   @id @default(cuid()) @map("_id")
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastStudyDate DateTime
  dailyGoals    Int      @default(0)  // Minutes or hours
  dailyProgress Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DailyActivity {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime
  studyTime   Int      // Minutes studied
  topicsCount Int      // Topics covered
  testsCount  Int      // Tests taken
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model StudyGoal {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // Daily, Weekly, Monthly
  target      Int      // Target value
  current     Int      // Current progress
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model StudyPhase {
  id               String   @id @default(cuid()) @map("_id")
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String   // Foundation, Advanced, Test Practice
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean  @default(false)
  
  // Enhanced goals structure
  dailyGoals       Json     // {
                           //   totalHours: number,
                           //   mathematicalSubjectHours: number,
                           //   coreSubjectHours: number,
                           //   revisionHours: number,
                           //   practiceQuestions: number
                           // }

  // Enhanced parallel progress tracking
  subjectGroups    Json     // {
                           //   mathematical: {
                           //     activeSubjects: [{ subjectId, allocation, currentTopic }],
                           //     rotationStrategy: string,
                           //     lastRotation: DateTime
                           //   },
                           //   core: {...},
                           //   revision: {...}
                           // }

  // Enhanced progress tracking
  progress         Json     // {
                           //   mathematical: { completed: number, total: number },
                           //   core: { completed: number, total: number },
                           //   revision: { completed: number, total: number },
                           //   overall: number
                           // }

  // Enhanced adaptive parameters
  adaptiveParams   Json     // {
                           //   difficultyLevel: number,
                           //   paceMultiplier: number,
                           //   focusAreas: string[],
                           //   rotationTriggers: {
                           //     performanceThreshold: number,
                           //     timeThreshold: number
                           //   }
                           // }

  dailySchedules   DailySchedule[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

model DailySchedule {
  id             String     @id @default(cuid()) @map("_id")
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  phaseId        String
  phase          StudyPhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  date           DateTime

  // Enhanced schedule structure
  schedule       Json       // {
                           //   blocks: [{
                           //     id: string,
                           //     startTime: string,
                           //     duration: number,
                           //     subjectId: string,
                           //     topicId: string,
                           //     type: 'mathematical' | 'core' | 'revision',
                           //     activityType: 'learning' | 'practice' | 'revision',
                           //     completed: boolean,
                           //     performance?: number
                           //   }],
                           //   totalTimeAllocated: number,
                           //   targetCompletionRate: number
                           // }

  // Enhanced completion tracking
  completion     Json       // {
                           //   completedBlocks: string[],
                           //   timeSpentByGroup: {
                           //     mathematical: number,
                           //     core: number,
                           //     revision: number
                           //   },
                           //   achievedRate: number
                           // }

  // Enhanced performance metrics
  performance    Json       // {
                           //   focusScore: number,
                           //   efficiencyRate: number,
                           //   completionRate: number,
                           //   groupPerformance: {
                           //     mathematical: number,
                           //     core: number,
                           //     revision: number
                           //   }
                           // }

  adaptiveScore  Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([userId])
  @@index([phaseId])
  @@index([date])
}

model PerformanceMetrics {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId      String
  subject        Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  date           DateTime

  // Enhanced metrics tracking
  metrics        Json     // {
                           //   accuracy: number,
                           //   timeSpent: number,
                           //   confidenceScore: number,
                           //   practiceQuestions: {
                           //     attempted: number,
                           //     correct: number,
                           //     timePerQuestion: number
                           //   },
                           //   conceptualUnderstanding: number,
                           //   revisionEffectiveness: number
                           // }

  weakAreas      String[] // Topic IDs needing attention
  strongAreas    String[] // Topic IDs with good performance

  // Enhanced recommendations
  recommendations Json    // [{
                           //   type: 'concept' | 'practice' | 'revision',
                           //   priority: number,
                           //   action: string,
                           //   reason: string,
                           //   topicIds: string[]
                           // }]

  // Enhanced trend tracking
  trends         Json     // {
                           //   daily: [{ date, score, time }],
                           //   weekly: [{ week, averageScore, totalTime }],
                           //   conceptProgress: [{ topicId, progress, lastRevision }]
                           // }

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([subjectId])
  @@index([date])
}

model StudyPlan {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  dailyPlans  DailyPlan[]
  config      Json     // PreparationConfig
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model DailyPlan {
  id          String   @id @default(cuid()) @map("_id")
  date        DateTime
  slots       Json     // DailyStudySlot[]
  totalHours  Float
  studyPlanId String
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([studyPlanId])
  @@index([date])
}

model StudyProgress {
  id            String   @id @default(cuid()) @map("_id")
  topicId       String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedHours Float
  lastStudied   DateTime
  confidence    Float    // 0-100
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([topicId])
  @@unique([userId, topicId])
}

model GateTest {
  id            String   @id @default(cuid()) @map("_id")
  type          String   // TWT, SWT, MST, GBG, GATE_PYQ
  name          String
  questions     Int
  marks         Int
  duration      Int      // in minutes
  attempts      Int      @default(0)
  completed     Boolean  @default(false)
  score         Float?
  scheduledFor  DateTime?
  completedAt   DateTime?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects      String[] // Array of subject IDs
  track         String   // CORE, MATHEMATICAL, REVISION
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([type])
}

model TestProgress {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  twtCompleted  Int      @default(0)  // Topic Wise Tests completed
  swtCompleted  Int      @default(0)  // Subject Wise Tests completed
  mstCompleted  Int      @default(0)  // Multiple Subject Tests completed
  gbgCompleted  Int      @default(0)  // GATE Before GATE completed
  pyqCompleted  Int      @default(0)  // PYQ Tests completed
  lastTWT       DateTime?
  lastSWT       DateTime?
  lastMST       DateTime?
  lastGBG       DateTime?
  lastPYQ       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([subjectId])
} 

model FocusSession {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime?
  pausedAt      DateTime?
  totalDuration Int      // in minutes
  pausedDuration Int     @default(0)  // in minutes
  isActive      Boolean  @default(true)
  phaseType     String   // learning, revision, practice
  breaks        Int      @default(0)
  skipBreaks    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([subjectId])
}

model UserSettings {
  id                String   @id @default(cuid()) @map("_id")
  userEmail         String   @unique
  emailNotifications Boolean @default(true)
  progressReminders  Boolean @default(true)
  testReminders     Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model TopicProgress {
  id          String   @id @default(cuid()) @map("_id")
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  // Progress type
  type        String   // "learning", "revision", "practice", "test"
  
  // Progress details
  completed   Boolean  @default(false)
  date        DateTime @default(now())
  
  @@index([topicId])
  @@index([userId])
  @@index([subjectId])
  @@index([date])
}

